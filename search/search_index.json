{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LayerScaffold","text":"<p><code>LayerScaffold</code> is a library that allows you to create a layered UI while using Jetpack Compose and still be able to have an app bar, bottom navigation bar and bottom sheet. It's a simple solution to a problem that is not yet solved in the Material Design Components library.</p> KotlinGroovy <pre><code>implementation(\"com.appsoluut.layerscaffold:layerscaffold:1.0.0\")\n</code></pre> <pre><code>implementation \"com.appsoluut.layerscaffold:layerscaffold:1.0.0\"\n</code></pre>"},{"location":"#usage","title":"Usage","text":"Compose <pre><code>LayerScaffold(\nfrontLayerContent = {\nText(\"Content as a supplement on top of your main content\")\n},\n) {\nText(\"Your main content\")\n}\n</code></pre> <ul> <li> <p>LayerScaffoldState</p> </li> <li> <p>Random Thoughts</p> </li> <li>AppSoluut</li> </ul>"},{"location":"states/","title":"LayerScaffold States","text":"<p>LayerScaffold supports the following 3 states:</p> <ol> <li><code>Concealed</code> - The back layer is hidden (only the <code>backLayerPeekHeight</code> part is still visible)</li> <li><code>Peeking</code> - The front layer is only showing it's <code>frontLayerPeekHeight</code> or calculated height of     the <code>frontLayerHeader</code> composable and the back layer is fully visible, it will accommodate for    the bottom bar height automatically</li> <li><code>Revealed</code> - Both the back and front layers are visible (the <code>headerHeight</code> part is visible on the     back layer)</li> </ol> <p>A state can also be changed programmatically:</p> <pre><code>val scaffoldState = rememberLayerScaffoldState()\nval scope = rememberCoroutineScope()\nLaunchedEffect(Unit) {\nscope.launch {\nscaffoldState.reveal()\n}\n}\n</code></pre>"}]}